{%- liquid
  assign active_values_count = 0

  for filter in collection.filters
    if filter.type == 'price_range'
      if filter.max_value.value != blank or filter.min_value.value != blank
        assign active_values_count = active_values_count | plus: 1
      endif
    else
      assign active_values_count = active_values_count | plus: filter.active_values.size
    endif
  endfor

  if section.settings.quick_links_menu.links.size > 0 or section.settings.show_filters and collection.filters.size > 0
    assign show_filters = true
  else
    assign show_filters = false
  endif

  # Extract current tags from URL path
  assign url_parts = request.path | split: '/'
  assign current_tags = ''
  if url_parts.size > 3 and url_parts[3] != blank
    assign current_tags = url_parts[3] | split: '+'
  else
    assign current_tags = empty
  endif

  # First, we retrieve, based on the merchant settings, the user preferences and the available space the most appropriate size
  assign products_mobile_grid_mode = cart.attributes.products_mobile_grid_mode

  if request.design_mode
    # In the theme editor we do not use the choice selected manually, to reduce confusion when changing the theme editor values
    assign products_desktop_grid_mode = section.settings.products_size_desktop
  elsif section.settings.show_grid_mode_selector
    assign products_desktop_grid_mode = cart.attributes.products_desktop_grid_mode | default: section.settings.products_size_desktop
  else
    assign products_desktop_grid_mode = section.settings.products_size_desktop
  endif

  if products_mobile_grid_mode == blank or request.design_mode
    if section.settings.products_per_row_mobile == '1'
      assign products_mobile_grid_mode = 'large'
    else
      assign products_mobile_grid_mode = 'medium'
    endif
  endif
-%}

{%- comment -%}
------------------------------------------------------------------------------------------------------------------------
CSS
------------------------------------------------------------------------------------------------------------------------
{%- endcomment -%}

<style>
  #shopify-section-{{ section.id }} {
    --product-list-horizontal-spacing-factor: {{ section.settings.horizontal_spacing_factor }};
    --product-list-vertical-spacing-factor: {{ section.settings.vertical_spacing_factor }};

    {% comment %}On mobile, it's simple! No sidebar or whatever{% endcomment %}
    --collection-items-per-row-medium: 2;
    --collection-items-per-row-large: 1;
  }

  #shopify-section-{{ section.id }} .product-list {
    --product-list-max-items-per-row-allowed: 99 !important; {% comment %}On collection page, we explicitly set a number of items so we don't want this{% endcomment %}
  }

  @media screen and (min-width: 700px) {
    #shopify-section-{{ section.id }} {
      {% comment %}On tablet, we do not have any sidebar, so we can fix it{% endcomment %}
      --collection-items-per-row-compact: 4;
      --collection-items-per-row-medium: 3;
      --collection-items-per-row-large: 2;
    }
  }

  @media screen and (min-width: 1000px) {
    #shopify-section-{{ section.id }} {
      {%- comment -%}Starting from 1000px it starts to get funky, as we can have or not the sidebar{%- endcomment -%}

      {%- if section.settings.filter_layout == 'sidebar' and show_filters -%}
        --collection-items-per-row-compact: 4;
        --collection-items-per-row-medium: 3;
        --collection-items-per-row-large: 2;
      {%- else -%}
        --collection-items-per-row-compact: 6;
        --collection-items-per-row-medium: 4;
        --collection-items-per-row-large: 3;
      {%- endif -%}
    }

    #shopify-section-{{ section.id }} .collection {
      {%- if section.settings.filter_layout == 'sidebar' and show_filters -%}
        --collection-grid-template: var(--collection-sidebar-width, 0) minmax(0,1fr);
      {%- endif -%}
    }
  }

  @media screen and (min-width: 1400px) {
    #shopify-section-{{ section.id }} {
      {%- comment -%}Starting from 1400px we can afford having more content even in sidebar mode{%- endcomment -%}

      {%- if section.settings.filter_layout == 'sidebar' and show_filters -%}
        --collection-items-per-row-compact: 6;
        --collection-items-per-row-medium: 4;
        --collection-items-per-row-large: 3;
      {%- endif -%}
    }
  }
</style>

{%- comment -%}
------------------------------------------------------------------------------------------------------------------------
LIQUID
------------------------------------------------------------------------------------------------------------------------
{%- endcomment -%}

<div class="color-scheme color-scheme--{{ section.settings.color_scheme.id }}">
  <div class="container">
    <div class="v-stack gap-6 sm:gap-12">
      {%- if collection.all_products_count == 0 -%}
        <div class="empty-state">
          <div class="prose">
            <h1 class="h4">{{ collection.title }}</h1>
            <p>{{ 'collection.general.empty_collection' | t }}</p>

            {%- assign button_content = 'collection.general.continue_shopping' | t -%}
            {%- render 'button', href: routes.all_products_collection_url, size: 'xl', content: button_content -%}
          </div>
        </div>
      {%- else -%}
        {%- if show_filters or section.settings.show_sort_by or section.settings.show_grid_mode_selector or section.settings.show_results_count -%}
          <height-observer variable="collection-toolbar" class="collection-toolbar full-bleed">
            {%-  render 'collection-filter' -%}
          </height-observer>
        {%- endif -%}

        <div class="collection">
          {%- paginate collection.products by section.settings.products_per_page -%}

          <div class="collection-sidebar">
            {% assign menus = "Catalogue,By Brand,By Size,By Comfort,Shop By Type" | split: "," %}

            {% for menu_title in menus %}
              {% assign menu_handle = menu_title | handleize %}
              {% assign linklist = linklists[menu_handle] %}

              {% if linklist.links.size > 0 %}
                <div class="sidebar-filter">
                  <h5 class="filter-heading">{{ menu_title }}</h5>
                  <ul class="filter-list {% if menu_title == 'Catalogue' %}catalogue-list{% endif %}">
                    {% for link in linklist.links %}
                      {% assign tag = link.title | handleize %}
                      {% assign is_checked = false %}
                      {% for current_tag in current_tags %}
                        {% if current_tag == tag %}
                          {% assign is_checked = true %}
                          {% break %}
                        {% endif %}
                      {% endfor %}
                      {% if menu_title == 'Catalogue' %}
                        <li class="catalogue-list-item">
                          <button
                            type="button"
                            class="catalogue-link{% if is_checked %} active{% endif %}"
                            data-tag="{{ tag }}"
                            onclick="handleCatalogueFilter(this)">
                            <span class="catalogue-plus" aria-hidden="true">+</span>
                            <span class="catalogue-text">{{ link.title }}</span>
                          </button>
                        </li>
                      {% else %}
                        <li>
                          <label>
                            <input type="checkbox"
                              data-tag="{{ tag }}"
                              {% if is_checked %}checked{% endif %}
                              onchange="handleMultiFilter(this)">
                            {{ link.title }}
                          </label>
                        </li>
                      {% endif %}
                    {% endfor %}
                  </ul>
                </div>
              {% endif %}
            {% endfor %}
          </div>

            {%- if collection.products_count == 0 -%}
              <div class="empty-state">
                <div class="v-stack gap-4">
                  <p>{{ 'collection.faceting.no_results' | t }}</p>

                  {%- assign button_content = 'collection.faceting.clear_filters' | t -%}

                  <facet-link>
                    {%- render 'button', href: collection.url, content: button_content -%}
                  </facet-link>
                </div>
              </div>
            {%- else -%}
              <div class="collection__main">
                {%- render 'active-facets', results: collection -%}
                <product-list id="product-list-{{ section.id }}" class="product-list" collection-mobile-layout="{{ products_mobile_grid_mode }}" collection-desktop-layout="{{ products_desktop_grid_mode }}">
                  {%- for product in collection.products -%}
                    {%- render 'product-card', product: product, reveal: settings.stagger_products_apparition, position: forloop.index, hide_product_information: section.settings.hide_product_information, stacked: true -%}
                  {%- endfor -%}
                </product-list>

                {%- render 'pagination', paginate: paginate, facet: true -%}
              </div>
            {%- endif -%}
          {%- endpaginate -%}
        </div>
      {%- endif -%}
    </div>
  </div>
</div>

{% schema %}
{
  "name": "t:sections.main_collection.name",
  "class": "shopify-section--main-collection",
  "tag": "section",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:global.colors.scheme",
      "default": "scheme-1"
    },
    {
      "type": "checkbox",
      "id": "hide_product_information",
      "label": "t:global.product_list.hide_product_information",
      "info": "t:global.product_list.hide_product_information_collection_info"
    },
    {
      "type": "header",
      "content": "t:global.product_list.product_list_category"
    },
    {
      "type": "range",
      "id": "products_per_page",
      "label": "t:global.faceting.products_per_page",
      "min": 8,
      "max": 50,
      "step": 1,
      "default": 48
    },
    {
      "type": "select",
      "id": "products_per_row_mobile",
      "label": "t:global.product_list.products_per_row_mobile",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "products_size_desktop",
      "label": "t:global.product_list.products_size_desktop",
      "info": "t:global.product_list.products_size_desktop_info",
      "options": [
        {
          "value": "compact",
          "label": "t:global.product_list.products_size_desktop_options.compact"
        },
        {
          "value": "medium",
          "label": "t:global.product_list.products_size_desktop_options.medium"
        },
        {
          "value": "large",
          "label": "t:global.product_list.products_size_desktop_options.large"
        }
      ],
      "default": "medium"
    },
    {
      "type": "checkbox",
      "id": "show_grid_mode_selector",
      "label": "t:global.product_list.show_grid_mode_selector",
      "info": "t:global.product_list.show_grid_mode_selector_info",
      "default": true
    },
    {
      "type": "header",
      "content": "t:global.product_list.spacing_category",
      "info": "t:global.product_list.spacing_category_info"
    },
    {
      "type": "range",
      "min": 0.2,
      "max": 2,
      "step": 0.1,
      "id": "horizontal_spacing_factor",
      "label": "t:global.product_list.horizontal_spacing_factor",
      "default": 1
    },
    {
      "type": "range",
      "min": 0.2,
      "max": 2,
      "step": 0.1,
      "id": "vertical_spacing_factor",
      "label": "t:global.product_list.vertical_spacing_factor",
      "default": 1
    },
    {
      "type": "header",
      "content": "t:global.faceting.filters_and_sorting_category"
    },
    {
      "type": "select",
      "id": "filter_layout",
      "label": "t:global.faceting.desktop_layout",
      "options": [
        {
          "value": "sidebar",
          "label": "t:global.faceting.desktop_layout_options.sidebar"
        },
        {
          "value": "drawer",
          "label": "t:global.faceting.desktop_layout_options.drawer"
        }
      ],
      "default": "sidebar"
    },
    {
      "type": "link_list",
      "id": "quick_links_menu",
      "label": "t:sections.main_collection.quick_links_menu",
      "info": "t:sections.main_collection.quick_links_menu_info"
    },
    {
      "type": "checkbox",
      "id": "show_sort_by",
      "label": "t:global.faceting.show_sort_by",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_filters",
      "label": "t:global.faceting.show_filters",
      "info": "t:global.faceting.show_filters_info",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_results_count",
      "label": "t:global.faceting.show_results_count",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_filter_group_name",
      "label": "t:global.faceting.show_group_name",
      "info": "t:global.faceting.show_group_name_info",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_filter_values_count",
      "label": "t:global.faceting.show_filter_values_count",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "open_filters_by_default",
      "label": "t:global.faceting.open_filters_by_default",
      "default": false
    }
  ]
}
{% endschema %}

<script>
  function initVariantFilterToggle() {
    const toggleBtn = document.querySelector('[data-toggle-filter]');
    const panel = document.querySelector('[data-filter-panel]');

    if (toggleBtn && panel) {
      toggleBtn.addEventListener('click', function () {
        panel.classList.toggle('open');
      });
    }
  }

  // Run on full page load
  document.addEventListener('DOMContentLoaded', function() {
    initVariantFilterToggle();
    initializeFilterState();
  });

  // Run on Shopify section reload (dynamic)
  document.addEventListener('shopify:section:load', function() {
    initVariantFilterToggle();
    initializeFilterState();
  });

  function initializeFilterState() {
    // Get all current tags from URL
    const urlParams = new URL(window.location.href);
    const pathSegments = urlParams.pathname.split('/');
    let currentTags = [];
    
    // Check if we have tags in the URL
    if (pathSegments.length > 3) {
      const tagSegment = pathSegments[3];
      if (tagSegment) {
        currentTags = tagSegment.split('+');
      }
    }
    
    // Set checkboxes based on URL tags
    document.querySelectorAll('.collection-sidebar input[type="checkbox"]').forEach(checkbox => {
      const tag = checkbox.getAttribute('data-tag');
      checkbox.checked = currentTags.includes(tag);
    });
    
    // Set active state for catalogue links
    document.querySelectorAll('.catalogue-link').forEach(btn => {
      const tag = btn.getAttribute('data-tag');
      if (currentTags.includes(tag)) {
        btn.classList.add('active');
      } else {
        btn.classList.remove('active');
      }
    });
  }

  function handleCatalogueFilter(button) {
    const tag = button.getAttribute('data-tag');
    const urlPath = window.location.pathname;
    const pathSegments = urlPath.split('/');
    const baseUrl = pathSegments.slice(0, 3).join('/');

    // Get all checked checkboxes (other filters)
    const sidebar = button.closest('.collection-sidebar');
    const checkedBoxes = sidebar.querySelectorAll('input[type="checkbox"]:checked');
    const selectedTags = Array.from(checkedBoxes).map(cb => cb.getAttribute('data-tag'));

    // Remove any existing catalogue tags (only one can be active)
    const allCatalogueButtons = sidebar.querySelectorAll('.catalogue-link');
    const catalogueTags = Array.from(allCatalogueButtons).map(btn => btn.getAttribute('data-tag'));
    let tags = selectedTags.filter(t => !catalogueTags.includes(t));

    // Toggle selection
    if (!button.classList.contains('active')) {
      tags.unshift(tag);
    }

    // Build the new URL
    let newUrl = baseUrl;
    if (tags.length > 0) {
      newUrl += '/' + tags.join('+');
    }
    if (window.location.search) {
      newUrl += window.location.search;
    }
    window.location.href = newUrl;
  }

  function handleMultiFilter(checkbox) {
    // Get the base collection URL (without tags)
    const urlPath = window.location.pathname;
    const pathSegments = urlPath.split('/');
    const baseUrl = pathSegments.slice(0, 3).join('/');
    
    // Get all currently selected tags from checkboxes
    const sidebar = checkbox.closest('.collection-sidebar');
    const checkedBoxes = sidebar.querySelectorAll('input[type="checkbox"]:checked');
    const selectedTags = Array.from(checkedBoxes).map(cb => cb.getAttribute('data-tag'));
    
    // Add the active catalogue tag if any
    const activeCatalogue = sidebar.querySelector('.catalogue-link.active');
    if (activeCatalogue) {
      selectedTags.unshift(activeCatalogue.getAttribute('data-tag'));
    }
    
    // Build the new URL
    let newUrl = baseUrl;
    if (selectedTags.length > 0) {
      newUrl += '/' + selectedTags.join('+');
    }
    
    // Preserve any query parameters
    if (window.location.search) {
      newUrl += window.location.search;
    }
    
    // Navigate to the new URL
    window.location.href = newUrl;
  }
</script>