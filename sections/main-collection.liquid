{%- liquid
  assign active_values_count = 0

  for filter in collection.filters
    if filter.type == 'price_range'
      if filter.max_value.value != blank or filter.min_value.value != blank
        assign active_values_count = active_values_count | plus: 1
      endif
    else
      assign active_values_count = active_values_count | plus: filter.active_values.size
    endif
  endfor

  if section.settings.quick_links_menu.links.size > 0 or section.settings.show_filters and collection.filters.size > 0
    assign show_filters = true
  else
    assign show_filters = false
  endif

  # Extract current tags from URL path
  assign url_parts = request.path | split: '/'
  assign current_tags = ''
  if url_parts.size > 3 and url_parts[3] != blank
    assign current_tags = url_parts[3] | split: '+'
  else
    assign current_tags = empty
  endif

  # Get current vendor from URL parameters
  assign current_vendor = ''
  if request.url contains 'filter.v.vendor'
    assign current_vendor = request.url | split: 'filter.v.vendor=' | last | split: '&' | first | url_decode
  endif

  # Get unique vendors from collection products
  assign used_vendors = ''
  assign base_collection = collections[collection.handle]
  for product in base_collection.products
    unless used_vendors contains product.vendor
      if used_vendors == ''
        assign used_vendors = product.vendor
      else
        assign used_vendors = used_vendors | append: '|' | append: product.vendor
      endif
    endunless
  endfor
  assign vendor_list = used_vendors | split: '|'

  # First, we retrieve, based on the merchant settings, the user preferences and the available space the most appropriate size
  assign products_mobile_grid_mode = cart.attributes.products_mobile_grid_mode

  if request.design_mode
    # In the theme editor we do not use the choice selected manually, to reduce confusion when changing the theme editor values
    assign products_desktop_grid_mode = section.settings.products_size_desktop
  elsif section.settings.show_grid_mode_selector
    assign products_desktop_grid_mode = cart.attributes.products_desktop_grid_mode | default: section.settings.products_size_desktop
  else
    assign products_desktop_grid_mode = section.settings.products_size_desktop
  endif

  if products_mobile_grid_mode == blank or request.design_mode
    if section.settings.products_per_row_mobile == '1'
      assign products_mobile_grid_mode = 'large'
    else
      assign products_mobile_grid_mode = 'medium'
    endif
  endif
-%}

<script src="{{ 'collection-filter.js' | asset_url }}" defer></script>

{%- comment -%}
------------------------------------------------------------------------------------------------------------------------
CSS
------------------------------------------------------------------------------------------------------------------------
{%- endcomment -%}

<style>
  #shopify-section-{{ section.id }} {
    --product-list-horizontal-spacing-factor: {{ section.settings.horizontal_spacing_factor }};
    --product-list-vertical-spacing-factor: {{ section.settings.vertical_spacing_factor }};

    {% comment %}On mobile, it's simple! No sidebar or whatever{% endcomment %}
    --collection-items-per-row-medium: 2;
    --collection-items-per-row-large: 1;
  }

  #shopify-section-{{ section.id }} .product-list {
    --product-list-max-items-per-row-allowed: 99 !important; {% comment %}On collection page, we explicitly set a number of items so we don't want this{% endcomment %}
  }

  @media screen and (min-width: 700px) {
    #shopify-section-{{ section.id }} {
      {% comment %}On tablet, we do not have any sidebar, so we can fix it{% endcomment %}
      --collection-items-per-row-compact: 4;
      --collection-items-per-row-medium: 3;
      --collection-items-per-row-large: 2;
    }
  }

  @media screen and (min-width: 1000px) {
    #shopify-section-{{ section.id }} {
      {%- comment -%}Starting from 1000px it starts to get funky, as we can have or not the sidebar{%- endcomment -%}

      {%- if section.settings.filter_layout == 'sidebar' and show_filters -%}
        --collection-items-per-row-compact: 4;
        --collection-items-per-row-medium: 3;
        --collection-items-per-row-large: 2;
      {%- else -%}
        --collection-items-per-row-compact: 6;
        --collection-items-per-row-medium: 4;
        --collection-items-per-row-large: 3;
      {%- endif -%}
    }

    #shopify-section-{{ section.id }} .collection {
      {%- if section.settings.filter_layout == 'sidebar' and show_filters -%}
        --collection-grid-template: var(--collection-sidebar-width, 0) minmax(0,1fr);
      {%- endif -%}
    }
  }

  @media screen and (min-width: 1400px) {
    #shopify-section-{{ section.id }} {
      {%- comment -%}Starting from 1400px we can afford having more content even in sidebar mode{%- endcomment -%}

      {%- if section.settings.filter_layout == 'sidebar' and show_filters -%}
        --collection-items-per-row-compact: 6;
        --collection-items-per-row-medium: 4;
        --collection-items-per-row-large: 3;
      {%- endif -%}
    }
  }
</style>

{%- comment -%}
------------------------------------------------------------------------------------------------------------------------
LIQUID
------------------------------------------------------------------------------------------------------------------------
{%- endcomment -%}

<div class="color-scheme color-scheme--{{ section.settings.color_scheme.id }}">
  <div class="container">
    <div class="v-stack gap-6 sm:gap-12">
      {%- if collection.all_products_count == 0 -%}
        <div class="empty-state">
          <div class="prose">
            <h1 class="h4">{{ collection.title }}</h1>
            <p>{{ 'collection.general.empty_collection' | t }}</p>

            {%- assign button_content = 'collection.general.continue_shopping' | t -%}
            {%- render 'button', href: routes.all_products_collection_url, size: 'xl', content: button_content -%}
          </div>
        </div>
      {%- else -%}
        {%- if show_filters or section.settings.show_sort_by or section.settings.show_grid_mode_selector or section.settings.show_results_count -%}
          <height-observer variable="collection-toolbar" class="collection-toolbar full-bleed">
            {%-  render 'collection-filter' -%}
          </height-observer>
        {%- endif -%}

        <div class="collection">
          {%- paginate collection.products by section.settings.products_per_page -%}

          <div class="collection-sidebar">
            <form method="GET" action="{{ collection.url }}" class="unified-sidebar-filters">
              {% comment %} Filter 1: Catalogue {% endcomment %}
              {% assign catalogue_menu = linklists['catalogue'] %}
              {% if catalogue_menu.links.size > 0 %}
                <div class="sidebar-filter">
                  <h5 class="filter-heading">Catalogue</h5>
                  <ul class="filter-list catalogue-list">
                    {% for link in catalogue_menu.links %}
                      <li class="catalogue-list-item">
                        <a
                          href="{{ link.url }}"
                          class="catalogue-link{% if collection.handle == link.object.handle %} active{% endif %}">
                          <span class="catalogue-plus" aria-hidden="true">+</span>
                          <span class="catalogue-text">{{ link.title }}</span>
                        </a>
                      </li>
                    {% endfor %}
                  </ul>
                </div>
              {% endif %}

              {% comment %} Filter 2: By Brand/Vendor {% endcomment %}
              {% for filter in collection.filters %}
                {% assign filter_label_downcase = filter.label | downcase %}
                {% if filter_label_downcase contains 'brand' or filter_label_downcase contains 'vendor' or filter.param_name == 'filter.v.vendor' %}
                  <div class="sidebar-filter">
                    <h5 class="filter-heading">By {{ filter.label }}</h5>
                    {% if filter.type == 'list' %}
                      <ul class="filter-list">
                        {% for value in filter.values %}
                          <li>
                            <label>
                              <input
                                type="checkbox"
                                name="{{ filter.param_name }}"
                                value="{{ value.value }}"
                                {% if value.active %}checked{% endif %}
                                class="filter-checkbox"
                                onchange="handleUnifiedFilterChange(this)">
                              {{ value.label }} <span style="color: #999999;">({{ value.count }})</span>
                            </label>
                          </li>
                        {% endfor %}
                      </ul>
                    {% endif %}
                  </div>
                {% endif %}
              {% endfor %}

              {% comment %} Filter 3: By Size {% endcomment %}
              {% for filter in collection.filters %}
                {% assign filter_label_downcase = filter.label | downcase %}
                {% if filter_label_downcase contains 'size' %}
                  <div class="sidebar-filter">
                    <h5 class="filter-heading">By {{ filter.label }}</h5>
                    {% if filter.type == 'list' %}
                      <ul class="filter-list">
                        {% for value in filter.values %}
                          <li>
                            <label>
                              <input
                                type="checkbox"
                                name="{{ filter.param_name }}"
                                value="{{ value.value }}"
                                {% if value.active %}checked{% endif %}
                                class="filter-checkbox"
                                onchange="handleUnifiedFilterChange(this)">
                              {{ value.label }} <span style="color: #999999;">({{ value.count }})</span>
                            </label>
                          </li>
                        {% endfor %}
                      </ul>
                    {% endif %}
                  </div>
                {% endif %}
              {% endfor %}

              {% comment %} Filter 4: By Comfort {% endcomment %}
              {% for filter in collection.filters %}
                {% assign filter_label_downcase = filter.label | downcase %}
                {% if filter_label_downcase contains 'comfort' %}
                  <div class="sidebar-filter">
                    <h5 class="filter-heading">By Comfort</h5>
                    {% if filter.type == 'list' %}
                      <ul class="filter-list">
                        {% for value in filter.values %}
                          {% assign value_label_downcase = value.label | downcase %}
                          {% if value_label_downcase == 'plush' or value_label_downcase == 'medium' or value_label_downcase == 'firm' %}
                            <li>
                              <label>
                                <input
                                  type="checkbox"
                                  name="{{ filter.param_name }}"
                                  value="{{ value.value }}"
                                  {% if value.active %}checked{% endif %}
                                  class="filter-checkbox"
                                  onchange="handleUnifiedFilterChange(this)">
                                {{ value.label }} <span style="color: #999999;">({{ value.count }})</span>
                              </label>
                            </li>
                          {% endif %}
                        {% endfor %}
                      </ul>
                    {% endif %}
                  </div>
                {% endif %}
              {% endfor %}
            </form>
          </div>

            {%- if collection.products_count == 0 -%}
              <div class="empty-state">
                <div class="v-stack gap-4">
                  <p>{{ 'collection.faceting.no_results' | t }}</p>

                  {%- assign button_content = 'collection.faceting.clear_filters' | t -%}

                  <facet-link>
                    {%- render 'button', href: collection.url, content: button_content -%}
                  </facet-link>
                </div>
              </div>
            {%- else -%}
              <div class="collection__main">
                {%- render 'active-facets', results: collection -%}
                <product-list id="product-list-{{ section.id }}" class="product-list" collection-mobile-layout="{{ products_mobile_grid_mode }}" collection-desktop-layout="{{ products_desktop_grid_mode }}">
                  {%- for product in collection.products -%}
                    {%- render 'product-card', product: product, reveal: settings.stagger_products_apparition, position: forloop.index, hide_product_information: section.settings.hide_product_information, stacked: true -%}
                  {%- endfor -%}
                </product-list>

                {%- render 'pagination', paginate: paginate, facet: true -%}
              </div>
            {%- endif -%}
          {%- endpaginate -%}
        </div>
      {%- endif -%}
    </div>
  </div>
</div>

{% schema %}
{
  "name": "t:sections.main_collection.name",
  "class": "shopify-section--main-collection",
  "tag": "section",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:global.colors.scheme",
      "default": "scheme-1"
    },
    {
      "type": "checkbox",
      "id": "hide_product_information",
      "label": "t:global.product_list.hide_product_information",
      "info": "t:global.product_list.hide_product_information_collection_info"
    },
    {
      "type": "header",
      "content": "t:global.product_list.product_list_category"
    },
    {
      "type": "range",
      "id": "products_per_page",
      "label": "t:global.faceting.products_per_page",
      "min": 8,
      "max": 50,
      "step": 1,
      "default": 48
    },
    {
      "type": "select",
      "id": "products_per_row_mobile",
      "label": "t:global.product_list.products_per_row_mobile",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "products_size_desktop",
      "label": "t:global.product_list.products_size_desktop",
      "info": "t:global.product_list.products_size_desktop_info",
      "options": [
        {
          "value": "compact",
          "label": "t:global.product_list.products_size_desktop_options.compact"
        },
        {
          "value": "medium",
          "label": "t:global.product_list.products_size_desktop_options.medium"
        },
        {
          "value": "large",
          "label": "t:global.product_list.products_size_desktop_options.large"
        }
      ],
      "default": "medium"
    },
    {
      "type": "checkbox",
      "id": "show_grid_mode_selector",
      "label": "t:global.product_list.show_grid_mode_selector",
      "info": "t:global.product_list.show_grid_mode_selector_info",
      "default": true
    },
    {
      "type": "header",
      "content": "t:global.product_list.spacing_category",
      "info": "t:global.product_list.spacing_category_info"
    },
    {
      "type": "range",
      "min": 0.2,
      "max": 2,
      "step": 0.1,
      "id": "horizontal_spacing_factor",
      "label": "t:global.product_list.horizontal_spacing_factor",
      "default": 1
    },
    {
      "type": "range",
      "min": 0.2,
      "max": 2,
      "step": 0.1,
      "id": "vertical_spacing_factor",
      "label": "t:global.product_list.vertical_spacing_factor",
      "default": 1
    },
    {
      "type": "header",
      "content": "t:global.faceting.filters_and_sorting_category"
    },
    {
      "type": "select",
      "id": "filter_layout",
      "label": "t:global.faceting.desktop_layout",
      "options": [
        {
          "value": "sidebar",
          "label": "t:global.faceting.desktop_layout_options.sidebar"
        },
        {
          "value": "drawer",
          "label": "t:global.faceting.desktop_layout_options.drawer"
        }
      ],
      "default": "sidebar"
    },
    {
      "type": "link_list",
      "id": "quick_links_menu",
      "label": "t:sections.main_collection.quick_links_menu",
      "info": "t:sections.main_collection.quick_links_menu_info"
    },
    {
      "type": "checkbox",
      "id": "show_sort_by",
      "label": "t:global.faceting.show_sort_by",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_filters",
      "label": "t:global.faceting.show_filters",
      "info": "t:global.faceting.show_filters_info",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_results_count",
      "label": "t:global.faceting.show_results_count",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_filter_group_name",
      "label": "t:global.faceting.show_group_name",
      "info": "t:global.faceting.show_group_name_info",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_filter_values_count",
      "label": "t:global.faceting.show_filter_values_count",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "open_filters_by_default",
      "label": "t:global.faceting.open_filters_by_default",
      "default": false
    }
  ]
}
{% endschema %}