<!doctype html>

<html lang="{{ request.locale.iso_code }}" dir="{% render 'direction' %}">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, maximum-scale=5.0">

    <title>{% if page_title == blank %}{{ shop.name }}{% else %}{{ page_title }}{% if current_page != 1 %} &ndash; {{ 'general.page' | t: page: current_page }}{% endif %}{% endif %}</title>

    {%- if page_description -%}
      <meta name="description" content="{{ page_description | escape }}">
    {%- endif -%}

    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon -%}
      <link rel="shortcut icon" href="{{ settings.favicon | image_url: width: 96 }}">
      <link rel="apple-touch-icon" href="{{ settings.favicon | image_url: width: 180 }}">
    {%- endif -%}

    {%- comment -%}Few prefetch to increase performance on commonly used third-parties{%- endcomment -%}
    <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>

    {%- unless settings.heading_font.system? -%}
      <link rel="preload" href="{{ settings.heading_font | font_url }}" as="font" type="font/woff2" crossorigin>
    {%- endunless -%}

    {%- unless settings.text_font.system? -%}
      <link rel="preload" href="{{ settings.text_font | font_url }}" as="font" type="font/woff2" crossorigin>
    {%- endunless -%}

    {%- render 'social-meta-tags' -%}
    {%- render 'microdata-schema' -%}
    {%- render 'css-variables' -%}
    {%- render 'js-variables' -%}

    {%- if request.page_type == 'gift_card' -%}
      <script src="{{ 'vendor/qrcode.js' | shopify_asset_url }}" defer></script>
    {%- endif -%}

    <!-- Splide Script -->
    <script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.3/dist/js/splide.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.3/dist/css/splide.min.css" />

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll('.splide').forEach(el => {
          new Splide(el, {
            type: 'slide',
            perPage: 5,
            perMove: 1,
            gap: '20px',
            pagination: false,
            breakpoints: {
              768: {
                perPage: 2,
                gap: '10px',
                focus: 'center'
              },
              480: {
                perPage: 1,
                gap: '10px',
                focus: 'center'
               }
            }
          }).mount();
        });

        // Tab switching
        const buttons = document.querySelectorAll(".tab-button");
        const tabs = document.querySelectorAll(".product-slider-wrapper");

        // Add active to first button
        if (buttons.length) {
          buttons[0].classList.add("active");
        }

        // Add click event to each tab button
        buttons.forEach(button => {
          button.addEventListener("click", () => {
            const target = button.dataset.tab;

            // Remove active from all buttons, then add to clicked
            buttons.forEach(btn => btn.classList.remove("active"));
            button.classList.add("active");

            // Show the clicked tab, hide the others
            tabs.forEach(tab => {
              tab.style.display = tab.dataset.tab === target ? 'block' : 'none';
            });
          });
        });
      });
    </script>

    <!-- Hot buys -->
    <script>
      document.querySelectorAll('.quick-shop-button').forEach(button => {
        button.addEventListener('click', function () {
          const handle = this.getAttribute('data-product-handle');
          // Trigger Prestige's modal or a custom quick shop modal
          console.log('Open quick shop for', handle);
        });
      });
    </script>

    <!-- Wishlist -->
    <script>
      document.querySelectorAll('.hot-buy-wishlist').forEach(el => {
        el.addEventListener('click', () => {
          alert('Added to wishlist! (mock)');
          // You can integrate your actual wishlist app logic here
        });
      });
    </script>

    <script type="importmap">
      {%- comment -%}On Safari 16.3 and lower, a polyfill is used to load importmap{%- endcomment -%}
      {
        "imports": {
          "vendor": "{{ 'vendor.min.js' | asset_url }}",
          "theme": "{{ 'theme.js' | asset_url }}",
          "photoswipe": "{{ 'photoswipe.min.js' | asset_url }}"
        }
      }
    </script>

    <script type="module" src="{{ 'vendor.min.js' | asset_url }}"></script>
    <script type="module" src="{{ 'theme.js' | asset_url }}"></script>

    {{ content_for_header }}


<script>
document.addEventListener('DOMContentLoaded', function () {
  const modal = document.getElementById('quickview-modal');
  const content = modal.querySelector('.quickview-content');
  const loader = document.getElementById('quickview-loader');

  document.addEventListener('click', function (e) {
    const icon = e.target.closest('.quickview-icon');
    if (icon) {
      const handle = icon.getAttribute('data-product-handle');
      const url = `/products/${handle}?section_id=product-quick-view`;

      loader.style.display = 'block';
      modal.style.display = 'flex';

      fetch(url)
        .then(res => res.text())
        .then(html => {
          content.innerHTML = html;
          loader.style.display = 'none';

          // Execute scripts in the loaded content
          const scripts = content.querySelectorAll('script');
          scripts.forEach(script => {
            if (script.innerHTML.trim()) {
              try {
                const newScript = document.createElement('script');
                newScript.innerHTML = script.innerHTML;
                document.head.appendChild(newScript);
                document.head.removeChild(newScript);
              } catch (error) {
                // Silent error handling
              }
            }
          });

          // Reinitialize Splide after injecting HTML
          const splideEl = content.querySelector('.splide');
          if (splideEl) {
            new Splide(splideEl, {
              type: 'loop',
              perPage: 1,
              pagination: true,
              arrows: true,
            }).mount();
          }

          // Initialize variant picker after content is loaded
          const productContainer = content.querySelector('.quick-view__container');
          if (productContainer) {
            const form = content.querySelector('[data-product-form]');
            const splideElement = content.querySelector('[id^="quickview-splide-"]');
            
            if (form && splideElement) {
              const productId = splideElement.id.replace('quickview-splide-', '');
              let formId;
              
              if (typeof form.id === 'string' && form.id) {
                formId = form.id;
              } else {
                formId = 'quick-view-form-' + productId;
                form.id = formId;
              }
              
              // Initialize variant picker
              const initQuickViewInline = function(productId, productFormId) {
                const form = document.querySelector('#' + productFormId);
                if (!form) return;

                const selects = form.querySelectorAll('.variant-select');
                const priceEl = form.querySelector('.price-wrapper .price');
                const variants = window['variants_' + productId];

                if (!variants || selects.length === 0) return;

                function updateVariant() {
                const selectedOptions = Array.from(selects).map(s => s.value);

                const variant = variants.find(v =>
                  v.options.every((opt, i) => opt.trim() === selectedOptions[i].trim())
                );

                if (variant) {
                  // Update hidden input
                  const hiddenInput = form.querySelector('input[name="id"]');
                  if (hiddenInput) hiddenInput.value = variant.id;

                  // Update price
                  const priceEl = form.querySelector('.price-wrapper .price');
                  if (priceEl) priceEl.innerHTML = variant.price_formatted;

                  // Update compare price
                  const compareEl = form.querySelector('.compare-price');
                  if (compareEl) {
                    if (variant.compare_at_price > variant.price) {
                      compareEl.innerHTML = variant.compare_at_price_formatted;
                      compareEl.style.display = 'inline';
                    } else {
                      compareEl.style.display = 'none';
                    }
                  }

                  // âœ… Update discount badge
                  const discountBadge = document.querySelector('.discount-badge');
                  if (discountBadge) {
                    if (variant.compare_at_price > variant.price) {
                      const discount = Math.round(
                        ((variant.compare_at_price - variant.price) * 100) / variant.compare_at_price
                      );
                      discountBadge.textContent = `-${discount}%`;
                      discountBadge.style.display = 'inline-block';
                    } else {
                      discountBadge.style.display = 'none';
                    }
                  }

                  // Update selected labels
                  selects.forEach((select) => {
                    const variantOption = select.closest('.variant-option');
                    const selectedValueSpan = variantOption.querySelector('.selected-value');
                    if (selectedValueSpan) {
                      selectedValueSpan.textContent = select.value;
                    }
                  });
                }
              }
                // Add event listeners
                selects.forEach(select => select.addEventListener('change', updateVariant));
                
                // Initialize with first variant
                updateVariant();
              };
              
              initQuickViewInline(productId, formId);
            }
          }
        })
        .catch(() => {
          content.innerHTML = '<p>Failed to load product.</p>';
          loader.style.display = 'none';
        });
    }

    // Close modal if clicking outside content
    if (e.target === modal) {
      modal.style.display = 'none';
      content.innerHTML = '';
    }
  });
});
</script>

    {% comment %} Geolocation redirect {% endcomment %}
    {% render 'redirect-canada-customers' %}


    <!-- Styling files -->
    {{- 'theme.css' | asset_url | stylesheet_tag: preload: true -}}
    {{- 'hot-buys.css' | asset_url | stylesheet_tag: preload: true -}}
    {{- 'slider-collection.css' | asset_url | stylesheet_tag: preload: true -}}
    {{- 'global.css' | asset_url | stylesheet_tag: preload: true -}}
    {{- 'explore-products.css' | asset_url | stylesheet_tag: preload: true -}}
    {{- 'product.css' | asset_url | stylesheet_tag: preload: true -}}
    {{- 'quick-view.css' | asset_url | stylesheet_tag: preload: true -}}

    <!-- Judge Testimonial -->
    {% render 'judgeme_core' %}

    <!-- Font Awesome CDN -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

    <!-- Google Fonts: Poppins and Quicksand -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Quicksand:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>

  {% liquid
    assign features_class = ''

    if settings.show_button_transition
      assign features_class = features_class | append: 'features--button-transition '
    endif

    if settings.show_image_zoom_on_hover
      assign features_class = features_class | append: 'features--zoom-image '
    endif
  %}

  <body class="{{ features_class }} color-scheme color-scheme--{{ settings.default_color_scheme.id }}">
    {%- render 'shadow-dom-templates' -%}

    <loading-bar class="loading-bar" aria-hidden="true"></loading-bar>
    <a href="#main" allow-hash-change class="skip-to-content sr-only">{{ 'general.accessibility.skip_to_content' | t }}</a>

    <span id="header-scroll-tracker" style="position: absolute; width: 1px; height: 1px; top: var(--header-scroll-tracker-offset, 10px); left: 0;">
      {%- comment -%}
        This allows our theme to track when the user has scrolled a given amount of pixels, without relying on a global scroll listener. This helps
        to improve performance and reduce reflows.
      {%- endcomment -%}
    </span>

    {%- if request.page_type != 'password' -%}
      {%- sections 'header-group' -%}
      {%- sections 'overlay-group' -%}
    {%- endif -%}

    <main id="main" class="anchor">
      {{ content_for_layout }}

      {%- comment -%}
      IMPLEMENTATION NOTE: For best semantics, having the footer group outside the main would be slightly better, but
        moving it inside the main allows to have all the sections (including sections inside the footer group) to be
        consecutive, and hence having a cleaner margin collapsing management.
      {%- endcomment -%}
      {%- if request.page_type != 'password' -%}
        {%- sections 'footer-group' -%}
      {%- endif -%}
    </main>
  </body>
</html>
